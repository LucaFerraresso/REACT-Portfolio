backupcard con bottoni 12345
senza chiamate (post) a firestore per  voti
salvo tutto in local storage. semplice

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { useSpring, animated } from "@react-spring/web";
import { useAuth } from "../../useContext/AuthContext";
import { toast } from "react-toastify";

const Card = ({ title, description, link, backgroundImage }) => {
  const [votes, setVotes] = useState([]); // Mantieni una lista dei voti
  const [rating, setRating] = useState(0);
  const { user } = useAuth();

  // Funzione per calcolare la media dei voti
  const calculateAverageRating = (votes) => {
    const sum = votes.reduce((acc, vote) => acc + vote, 0);
    return votes.length ? (sum / votes.length).toFixed(2) : 0;
  };

  const handleVote = (value) => {
    if (!user) {
      toast.error("Devi effettuare il login per votare!");
      return;
    }
    const newVotes = [...votes, value]; // Aggiungi il nuovo voto alla lista
    setVotes(newVotes);
    setRating(calculateAverageRating(newVotes)); // Aggiorna il rating con la nuova media
    //toast.success("Voto registrato con successo!");
  };

  const [imageProps, imageApi] = useSpring(() => ({
    transform: "scale(1)",
    config: { tension: 200, friction: 20 },
  }));
  const handleConfirmVote = () => {
    if (!user) {
      toast.error("Devi effettuare il login per votare!");
    } else {
      toast.success("Voto registrato con successo!");
    }
  };

  useEffect(() => {
    const savedVotes = JSON.parse(localStorage.getItem(`${title}-votes`));
    if (savedVotes) {
      setVotes(savedVotes);
      setRating(calculateAverageRating(savedVotes));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem(`${title}-votes`, JSON.stringify(votes));
  }, [votes]);

  return (
    <div className="w-[300px] h-[400px] md:w-[350px] md:h-[450px] lg:w-[400px] lg:h-[500px] rounded-lg overflow-hidden shadow-lg bg-white border border-black">
      <div className="flex flex-col justify-between h-full">
        <div className="relative overflow-hidden">
          <Link to={link}>
            <animated.img
              src={backgroundImage}
              alt="Background"
              className="w-full h-40 md:h-48 lg:h-60 object-cover transition-transform duration-300 cursor-pointer"
              style={imageProps}
              onMouseEnter={() => imageApi.start({ transform: "scale(1.1)" })}
              onMouseLeave={() => imageApi.start({ transform: "scale(1)" })}
            />
          </Link>

          <div
            className="absolute top-0 right-0 mt-2 mr-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded border border-black"
            style={{
              textShadow:
                "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
            }}
          >
            FREE
          </div>
        </div>
        <div className="p-6">
          <h1 className="text-gray-900 text-xl font-bold mb-2">{title}</h1>
          <p className="text-gray-700 text-base mb-4">{description}</p>

          <div className="flex items-center space-x-2 mb-4">
            {/* Aggiungi pulsanti per il voto */}
            <button
              onClick={() => handleVote(1)}
              className="bg-blue-500 text-white py-1 px-2 rounded hover:bg-blue-600"
            >
              1
            </button>
            <button
              onClick={() => handleVote(2)}
              className="bg-blue-500 text-white py-1 px-2 rounded hover:bg-blue-600"
            >
              2
            </button>
            <button
              onClick={() => handleVote(3)}
              className="bg-blue-500 text-white py-1 px-2 rounded hover:bg-blue-600"
            >
              3
            </button>
            <button
              onClick={() => handleVote(4)}
              className="bg-blue-500 text-white py-1 px-2 rounded hover:bg-blue-600"
            >
              4
            </button>
            <button
              onClick={() => handleVote(5)}
              className="bg-blue-500 text-white py-1 px-2 rounded hover:bg-blue-600"
            >
              5
            </button>

            <button
              onClick={handleConfirmVote}
              className="bg-green-600 text-white py-1 px-2 rounded hover:bg-green-600"
            >
              Vota
            </button>
          </div>

          {/* Mostra il punteggio attuale */}
          <div className="text-gray-700 text-base mb-2">
            Punteggio attuale: {rating}
          </div>
          <div className="flex items-center space-x-2">
            <span
              className="text-blue-300 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              HTML
            </span>
            <span
              className="text-blue-800 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              CSS
            </span>
            <span
              className="text-pink-400 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              JS
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Card; 

questa card invece manda post ad databsase il voto assegnato
tra l'altro i bottoni ora sono diventati stelle 
manca ancora pero' il pulsante conferma, da aggiungere assolutamente 

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { useSpring, animated } from "@react-spring/web";
import { useAuth } from "../../useContext/AuthContext";
import { toast } from "react-toastify";
import { FaStar } from "react-icons/fa";
import {
  saveVoteToFirestore,
  getVotesFromFirestore,
} from "../../API/firestore"; // Importa le nuove funzioni

const Card = ({ title, description, link, backgroundImage, projectId }) => {
  const [rating, setRating] = useState(0);
  const { user } = useAuth();

  const handleVote = async (value) => {
    if (!user) {
      toast.error("Devi effettuare il login per votare!");
      return;
    }
    setRating(value);
    await saveVoteToFirestore(projectId, user.uid, value); // Salva il voto nel Firestore
    toast.success("Voto registrato con successo!");
  };

  useEffect(() => {
    const fetchVotes = async () => {
      if (user) {
        const savedVote = await getVotesFromFirestore(projectId, user.uid);
        if (savedVote) {
          setRating(savedVote);
        }
      }
    };

    fetchVotes();
  }, [user, projectId]);

  const [imageProps, imageApi] = useSpring(() => ({
    transform: "scale(1)",
    config: { tension: 200, friction: 20 },
  }));

  return (
    <div className="w-[300px] h-[400px] md:w-[350px] md:h-[450px] lg:w-[400px] lg:h-[500px] rounded-lg overflow-hidden shadow-lg bg-white border border-black">
      <div className="flex flex-col justify-between h-full">
        <div className="relative overflow-hidden">
          <Link to={link}>
            <animated.img
              src={backgroundImage}
              alt="Background"
              className="w-full h-60 md:h-72 lg:h-80 object-cover transition-transform duration-300 cursor-pointer"
              style={imageProps}
              onMouseEnter={() => imageApi.start({ transform: "scale(1.1)" })}
              onMouseLeave={() => imageApi.start({ transform: "scale(1)" })}
            />
          </Link>

          <div
            className="absolute top-0 right-0 mt-2 mr-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded border border-black"
            style={{
              textShadow:
                "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
            }}
          >
            FREE
          </div>
        </div>
        <div className="p-6">
          <h1 className="text-gray-900 text-xl font-bold mb-2">{title}</h1>
          <p className="text-gray-700 text-base mb-4">{description}</p>

          <div className="flex items-center space-x-1 mb-4">
            {[1, 2, 3, 4, 5].map((star) => (
              <FaStar
                key={star}
                size={24}
                onClick={() => handleVote(star)}
                onMouseEnter={() => setRating(star)}
                onMouseLeave={() => setRating((prevRating) => prevRating)}
                color={star <= rating ? "#ffc107" : "#e4e5e9"}
                style={{
                  cursor: "pointer",
                  transition: "color 200ms",
                }}
              />
            ))}
          </div>

          {/* Mostra il punteggio attuale */}
          <div className="text-gray-700 text-base mb-2">
            Punteggio attuale: {rating}
          </div>
          <div className="flex items-center space-x-2">
            <span
              className="text-blue-300 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              HTML
            </span>
            <span
              className="text-blue-800 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              CSS
            </span>
            <span
              className="text-pink-400 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              JS
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Card;
//in progetto ora dovrebbe funzionare con anche il pulsante 
//da rivedere la questione dell'utente quando logga e se logga, come riconoscerlo

backup delle funzioni get
//fetch (post) per salvare nel database i voti assegnati ai progetti dagli utenti

// Funzione per salvare i voti nel Firestore
export async function saveVoteToFirestore(projectId, userId, vote) {
  const votesCollection = collection(db, "votes");
  const voteDocRef = doc(votesCollection, `${projectId}_${userId}`);

  try {
    const docSnapshot = await getDocs(voteDocRef);

    if (docSnapshot.exists()) {
      // Se il documento esiste già, aggiorniamo il voto
      await updateDoc(voteDocRef, {
        vote: vote,
      });
    } else {
      // Se il documento non esiste, lo creiamo
      await addDoc(votesCollection, {
        projectId,
        userId,
        vote,
      });
    }

    toast.success("Voto salvato con successo");
  } catch (error) {
    toast.error("Errore nel salvataggio del voto: ");
  }
}

// Funzione per ottenere i voti esistenti da Firestore
export async function getVotesFromFirestore(projectId, userId) {
  const votesCollection = collection(db, "votes");
  const voteDocRef = doc(votesCollection, `${projectId}_${userId}`);

  try {
    const docSnapshot = await getDoc(voteDocRef);

    if (docSnapshot.exists()) {
      return docSnapshot.data().vote;
    } else {
      return null;
    }
  } catch (error) {
    toast.error("Errore nel recupero del voto");
    return null;
  }
}

// Funzione per ottenere il numero totale di voti per un progetto
export async function getTotalVotes(projectId) {
  const votesCollection = collection(db, "votes");
  const q = query(votesCollection, where("projectId", "==", projectId));

  try {
    const querySnapshot = await getDocs(q);
    return querySnapshot.size; // Ritorna il numero totale di documenti
  } catch (error) {
    console.error("Errore nel conteggio dei voti: ", error);
    return 0;
  }
}


