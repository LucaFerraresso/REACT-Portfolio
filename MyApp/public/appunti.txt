//miglioriamo gli esercizi,uno ad uno

export const Exercises = [
  {
    id: "advice-generator",
    title: "Advice Generator",
    description:
      "The perfect project if you're learning how to interact with 3rd-party APIs. This challenge uses the Advice Slip API to generate random quotes of advice.",
    link: "/exercise/advicegenerator",
    backgroundImage:
      "/Exercises/advice-generator-app-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "age-calculator",
    title: "Age Calculator",
    description:
      "This challenge is designed to sharpen your JavaScript and form validation skills. Working with dates in JavaScript can be tricky, so this will be a nice test!",
    link: "/exercise/agecalculator",
    backgroundImage:
      "/Exercises/age-calculator-app-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "contact-form",
    title: "Contact Form",
    description:
      "Building accessible forms is a crucial task for front-end developers. This challenge will help you practice building a form with several input types and validation.",
    link: "/exercise/contactform",
    backgroundImage: "/Exercises/contact-form-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "mortgage-calculator",
    title: "Mortgage Calculator",
    description:
      "This mortgage calculator is an excellent project for practicing working with forms, client-side validation, and updating the DOM. Remember to focus on accessibility, too!",
    link: "/exercise/mortgagecalculator",
    backgroundImage:
      "/Exercises/mortgage-repayment-calculator-main/design/desktop-design-completed.jpg",
    initialRating: 0,
  },
  {
    id: "product-list-with-cart",
    title: "Product List with Cart",
    description:
      "Practice updating the UI in multiple places based on user actions. The starter download also includes a JSON file to help you practice populating the DOM dynamically.",
    link: "/exercise/fakeecommerce",
    backgroundImage:
      "/Exercises/product-list-with-cart-main/design/desktop-design-selected.jpg",
    initialRating: 0,
  },
  {
    id: "interactive-card-details-form",
    title: "Interactive Credit Card Details Form",
    description:
      "This fun project will be an excellent way to practice DOM manipulation and form validation while also putting your HTML and CSS skills to the test.",
    link: "/exercise/interactivecardform",
    backgroundImage:
      "/Exercises/interactive-card-details-form-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "tip-calculator",
    title: "Tip Calculator",
    description:
      "This small app is perfect for anyone starting to get to grips with JavaScript. The calculator functionality will be a nice test!",
    link: "/exercise/tipcalculator",
    backgroundImage:
      "/Exercises/tip-calculator-app-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "interactive-pricing-components",
    title: "Interactive Pricing Components",
    description:
      "In this project, you'll build out an interactive pricing component complete with custom range input slider and pricing toggle. A perfect way to test your JS skills!",
    link: "/exercise/pricingslider",
    backgroundImage:
      "/Exercises/interactive-pricing-component-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "news-letter-sign-up",
    title: "NewsLetter Sign Up",
    description:
      "This will test your skills with basic form structure, validation, and submission. The success state will also be an excellent opportunity to work with DOM manipulation.",
    link: "/exercise/newslettersignup",
    backgroundImage:
      "/Exercises/newsletter-sign-up-with-success-message-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "launch-countdown-timer",
    title: "Launch Countdown Timer",
    description:
      "This will be a fun one! Your challenge is to build this countdown timer. There are lots of small CSS tests in the design as well. So it should keep you busy!",
    link: "/exercise/launchcountdowntimer",
    backgroundImage:
      "/Exercises/launch-countdown-timer-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "expenses-chart-component",
    title: "Expenses Chart Component",
    description:
      "In this challenge, you'll create a bar chart component from scratch. We provide a local JSON file, so you can add the chart data dynamically if you choose.",
    link: "/exercise/expenseschartcomponent",
    backgroundImage:
      "/Exercises/expenses-chart-component-main/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "rock-paper-scissors-master",
    title: "Rock Paper Scissors Master",
    description:
      "This challenge will test your HTML, CSS and JavaScript skills. There's even a Rock, Paper, Scissors, Lizard, Spock version if you really want to challenge yourself.",
    link: "/exercise/rockpaperscissorsmaster",
    backgroundImage:
      "/Exercises/rock-paper-scissors-master/design/desktop-preview.jpg",
    initialRating: 0,
  },
  {
    id: "Three.js-Project",
    title: "Three.js Mini Project",
    description:
      "A 3D interactive experience built using Three.js and React, featuring real-time rendering and dynamic controls.  ",
    link: "/exercise/threejsproject",
    backgroundImage: "/Exercises/threejs-project/images/desktop-preview.jpg",
    initialRating: 0,
  },
];

///////////////////////////////////////////////////////////////////////////////////////////////////////
import { useState } from "react";
import { motion } from "framer-motion";

const choices = [
  {
    name: "rock",
    image: "/Exercises/rock-paper-scissors-master/images/icon-rock.svg",
    color: "red",
  },
  {
    name: "paper",
    image: "/Exercises/rock-paper-scissors-master/images/icon-paper.svg",
    color: "blue",
  },
  {
    name: "scissors",
    image: "/Exercises/rock-paper-scissors-master/images/icon-scissors.svg",
    color: "yellow",
  },
  {
    name: "lizard",
    image: "/Exercises/rock-paper-scissors-master/images/icon-lizard.svg",
    color: "green",
  },
  {
    name: "spock",
    image: "/Exercises/rock-paper-scissors-master/images/icon-spock.svg",
    color: "purple",
  },
];

const winConditions = {
  rock: ["scissors", "lizard"],
  paper: ["rock", "spock"],
  scissors: ["paper", "lizard"],
  lizard: ["spock", "paper"],
  spock: ["scissors", "rock"],
};

const ChoiceButton = ({ choice, onClick }) => (
  <motion.div
    whileHover={{ scale: 1.1 }}
    whileTap={{ scale: 0.9 }}
    className="relative cursor-pointer m-2 border border-white rounded-full shadow-lg transform"
    onClick={() => onClick(choice.name)}
    style={{ padding: "10px", backgroundColor: choice.color }}
  >
    <div className="bg-white p-2 rounded-full">
      <img
        src={choice.image}
        alt={choice.name}
        className="w-20 h-20 sm:w-28 sm:h-28 transition-transform duration-300 ease-in-out"
        style={{ filter: "drop-shadow(0 0 5px rgba(0, 0, 0, 0.5))" }}
      />
    </div>
  </motion.div>
);

const RockPaperScissors = () => {
  const [gameState, setGameState] = useState({
    playerChoice: "",
    computerChoice: "",
    result: "",
    score: 0,
    showRules: false,
    isStandardMode: true,
  });

  const availableChoices = gameState.isStandardMode
    ? choices.slice(0, 3)
    : choices;

  const getRandomChoice = () =>
    availableChoices[Math.floor(Math.random() * availableChoices.length)];

  const handlePlayerChoice = (choice) => {
    const computer = getRandomChoice().name;
    const playerWins = winConditions[choice].includes(computer);
    const newScore = playerWins ? gameState.score + 1 : gameState.score - 1;

    setGameState((prevState) => ({
      ...prevState,
      playerChoice: choice,
      computerChoice: computer,
      result: playerWins
        ? "You win!"
        : choice === computer
        ? "It's a tie!"
        : "You lose!",
      score: newScore,
    }));
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-[#2c2c54] to-[#1e1e32] px-4 font-barlow">
      <h1 className="text-3xl sm:text-4xl font-bold text-white mb-4">
        Rock Paper Scissors
      </h1>
      <h2 className="text-xl sm:text-2xl text-white mb-4">
        Score: {gameState.score}
      </h2>

      <motion.div
        layout
        className="flex flex-wrap justify-center mb-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {availableChoices.map((choice) => (
          <ChoiceButton
            key={choice.name}
            choice={choice}
            onClick={handlePlayerChoice}
          />
        ))}
      </motion.div>

      <div className="text-center text-lg text-white mb-4">
        {gameState.playerChoice && (
          <p className="mb-1">
            You chose:{" "}
            <span className="font-bold">{gameState.playerChoice}</span>
          </p>
        )}
        {gameState.computerChoice && (
          <p className="mb-1">
            Computer chose:{" "}
            <span className="font-bold">{gameState.computerChoice}</span>
          </p>
        )}
        {gameState.result && (
          <p
            className={`font-bold ${
              gameState.result === "You win!"
                ? "text-green"
                : gameState.result === "It's a tie!"
                ? "text-yellow"
                : "text-red"
            }`}
          >
            {gameState.result}
          </p>
        )}
      </div>

      <motion.button
        onClick={() =>
          setGameState((prevState) => ({ ...prevState, showRules: true }))
        }
        className="mt-4 px-6 py-2 bg-blue-500 text-white font-bold rounded transition duration-300 hover:bg-blue-600"
        whileHover={{ scale: 1.05 }}
      >
        Show Rules
      </motion.button>
      <motion.button
        onClick={() =>
          setGameState((prevState) => ({
            ...prevState,
            isStandardMode: !prevState.isStandardMode,
          }))
        }
        className="mt-4 px-6 py-2 bg-gray-500 text-white font-bold rounded transition duration-300 hover:bg-gray-600"
        whileHover={{ scale: 1.05 }}
      >
        {gameState.isStandardMode
          ? "Switch to Advanced Mode"
          : "Switch to Standard Mode"}
      </motion.button>

      {gameState.showRules && (
        <motion.div
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 50 }}
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center"
        >
          <div className="flex flex-col bg-white p-4 rounded-lg shadow-lg max-w-xs w-full mx-6 my-4">
            <button
              onClick={() =>
                setGameState((prevState) => ({
                  ...prevState,
                  showRules: false,
                }))
              }
              className="absolute top-2 right-2 text-black text-lg font-bold"
            >
              X
            </button>
            <h2 className="text-2xl font-bold mb-4 text-center">Game Rules</h2>

            <div className="mb-4">
              <h3 className="text-xl font-semibold mb-2">Standard Rules:</h3>
              <img
                src="/Exercises/rock-paper-scissors-master/images/image-rules.svg"
                alt="Standard Game Rules"
                className="w-full h-auto rounded-lg max-w-[200px] mx-auto"
              />
            </div>

            <div className="mb-4">
              <h3 className="text-xl font-semibold mb-2">Bonus Rules:</h3>
              <img
                src="/Exercises/rock-paper-scissors-master/images/image-rules-bonus.svg"
                alt="Bonus Game Rules"
                className="w-full h-auto rounded-lg max-w-[200px] mx-auto"
              />
            </div>

            <motion.button
              onClick={() =>
                setGameState((prevState) => ({
                  ...prevState,
                  showRules: false,
                }))
              }
              className="mt-4 px-4 py-2 bg-gray-300 text-black font-bold rounded transition duration-300 hover:bg-gray-400"
              whileHover={{ scale: 1.05 }}
            >
              Close
            </motion.button>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default RockPaperScissors;





