backup card homepage before vote feature:///////////////////////////////////////////////////
import React from "react";
import { Link } from "react-router-dom";
import { useSpring, animated } from "@react-spring/web";

const Card = ({ title, description, link, backgroundImage }) => {
  const [imageProps, imageApi] = useSpring(() => ({
    transform: "scale(1)",
    config: { tension: 200, friction: 20 },
  }));

  return (
    <div className="w-[300px] h-[400px] md:w-[350px] md:h-[450px] lg:w-[400px] lg:h-[500px] rounded-lg overflow-hidden shadow-lg bg-white border border-black">
      <div className="flex flex-col justify-between h-full">
        <div className="relative overflow-hidden">
          <Link to={link}>
            <animated.img
              src={backgroundImage}
              alt="Background"
              className="w-full h-40 md:h-48 lg:h-60 object-cover transition-transform duration-300 cursor-pointer"
              style={imageProps}
              onMouseEnter={() => imageApi.start({ transform: "scale(1.1)" })}
              onMouseLeave={() => imageApi.start({ transform: "scale(1)" })}
            />
          </Link>

          <div
            className="absolute top-0 right-0 mt-2 mr-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded border border-black"
            style={{
              textShadow:
                "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
            }}
          >
            FREE
          </div>
        </div>
        <div className="p-6">
          <h1 className="text-gray-900 text-xl font-bold mb-2">{title}</h1>
          <p className="text-gray-700 text-base mb-4">{description}</p>

          <div className="flex items-center space-x-2 mb-4">
            <span
              className="text-blue-300 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              HTML
            </span>
            <span
              className="text-blue-800 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              CSS
            </span>
            <span
              className="text-pink-400 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              JS
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Card;
////////////////////////////////////////////////////////////////////////


backup homepage before vote feature ////////////////////////////////////////////////////////////

import React from "react";
import { useSpring, animated } from "@react-spring/web";
import Card from "../components/atoms/Card";

const HomePage = () => {
  const Exercises = [
    {
      title: "Advice Generator",
      description:
        "The perfect project if you're learning how to interact with 3rd-party APIs. This challenge uses the Advice Slip API to generate random quotes of advice.",
      link: "/exercise/advicegenerator",
      backgroundImage:
        "/Exercises/advice-generator-app-main/design/desktop-preview.jpg",
    },
    {
      title: "Age Calculator",
      description:
        "This challenge is designed to sharpen your JavaScript and form validation skills. Working with dates in JavaScript can be tricky, so this will be a nice test!",
      link: "/exercise/agecalculator",
      backgroundImage:
        "/Exercises/age-calculator-app-main/design/desktop-preview.jpg",
    },
    {
      title: "Contact Form",
      description:
        "Building accessible forms is a crucial task for front-end developers. This challenge will help you practice building a form with several input types and validation.",
      link: "/exercise/contactform",
      backgroundImage:
        "/Exercises/contact-form-main/design/desktop-preview.jpg",
    },
    {
      title: "Mortgage Calculator",
      description:
        "This mortgage calculator is an excellent project for practicing working with forms, client-side validation, and updating the DOM. Remember to focus on accessibility, too!",
      link: "/exercise/mortgagecalculator",
      backgroundImage:
        "/Exercises/mortgage-repayment-calculator-main/design/desktop-design-completed.jpg",
    },
    {
      title: "Product List with Cart",
      description:
        "Practice updating the UI in multiple places based on user actions. The starter download also includes a JSON file to help you practice populating the DOM dynamically.",
      link: "/exercise/fakeecommerce",
      backgroundImage:
        "/Exercises/product-list-with-cart-main/design/desktop-design-selected.jpg",
    },
    {
      title: "Interactive Credit Card Details Form",
      description:
        "This fun project will be an excellent way to practice DOM manipulation and form validation while also putting your HTML and CSS skills to the test.",
      link: "/exercise/interactivecardform",
      backgroundImage:
        "/Exercises/interactive-card-details-form-main/design/desktop-preview.jpg",
    },
    {
      title: "Tip Calculator",
      description:
        "This small app is perfect for anyone starting to get to grips with JavaScript. The calculator functionality will be a nice test!",
      link: "/exercise/tipcalculator",
      backgroundImage:
        "/Exercises/tip-calculator-app-main/design/desktop-preview.jpg",
    },
    {
      title: "Interactive Pricing Components",
      description:
        "In this project, you'll build out an interactive pricing component complete with custom range input slider and pricing toggle. A perfect way to test your JS skills!",
      link: "/exercise/pricingslider",
      backgroundImage:
        "/Exercises/interactive-pricing-component-main/design/desktop-preview.jpg",
    },
    {
      title: "NewsLetter Sign Up",
      description:
        "This will test your skills with basic form structure, validation, and submission. The success state will also be an excellent opportunity to work with DOM manipulation.",
      link: "/exercise/newslettersignup",
      backgroundImage:
        "/Exercises/newsletter-sign-up-with-success-message-main/design/desktop-preview.jpg",
    },
    {
      title: "Launch Countdown Timer",
      description:
        "This will be a fun one! Your challenge is to build this countdown timer. There are lots of small CSS tests in the design as well. So it should keep you busy!",
      link: "/exercise/launchcountdowntimer",
      backgroundImage:
        "/Exercises/launch-countdown-timer-main/design/desktop-preview.jpg",
    },
    {
      title: "Expenses Chart Component",
      description:
        "In this challenge, you'll create a bar chart component from scratch. We provide a local JSON file, so you can add the chart data dynamically if you choose.",
      link: "/exercise/expenseschartcomponent",
      backgroundImage:
        "/Exercises/expenses-chart-component-main/design/desktop-preview.jpg",
    },
  ];

  // Funzione di animazione per il titolo
  const headerSpring = useSpring({
    from: { opacity: 0, transform: "translate3d(0,-20px,0)" },
    to: { opacity: 1, transform: "translate3d(0,0,0)" },
    config: { tension: 150, friction: 15 },
  });

  return (
    <>
      <animated.h1
        style={headerSpring}
        className="text-4xl font-bold text-off-black text-center py-6 bg-gray-50"
      >
        Esercizi
      </animated.h1>
      <div className="min-h-screen bg-gray-50 flex flex-wrap p-4 gap-6 justify-center">
        {Exercises.map((exercise, index) => {
          const cardSpring = useSpring({
            from: { opacity: 0, transform: "scale(0.9)" },
            to: { opacity: 1, transform: "scale(1)" },
            delay: index * 100,
          });

          return (
            <animated.div style={cardSpring} key={index}>
              <Card
                title={exercise.title}
                description={exercise.description}
                link={exercise.link}
                backgroundImage={exercise.backgroundImage}
              />
            </animated.div>
          );
        })}
      </div>
    </>
  );
};

export default HomePage;
///////////////////////////////////////////////////////////////////////////////////////////

back login page before context ///////////////////////////////////////////////////////////
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = (e) => {
    e.preventDefault();

    console.log("Login successful for", username);
    navigate("/homepage"); // Reindirizza alla homepage dopo il login
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <form
        onSubmit={handleLogin}
        className="bg-white p-8 rounded shadow-md w-80"
      >
        <h2 className="text-2xl font-bold mb-4">Login</h2>
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">Username</label>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="border border-gray-300 rounded p-2 w-full"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 mb-2">Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="border border-gray-300 rounded p-2 w-full"
            required
          />
        </div>
        <button
          type="submit"
          className="bg-blue-500 text-white py-2 px-4 rounded w-full hover:bg-blue-600"
        >
          Login
        </button>
      </form>
    </div>
  );
};

export default Login;
//////////////////////////////////////////////////////////////////

backup navbar before login context//////////////////////////////////////////////////
import { NavLink } from "react-router-dom";

const menulist = [
  {
    name: "Home",
    path: "/homepage",
  },
  {
    name: "Log-in",
    path: "/login",
  },
];

const Navbar = () => {
  return (
    <nav className="bg-gray-800 text-white p-4 flex flex-col sm:flex-row justify-between items-center text-lg sm:text-2xl">
      <ul className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 m-0 w-full sm:w-auto">
        {menulist.map((item, index) => (
          <li key={index} className="text-center sm:text-left">
            <NavLink
              className={({ isActive }) =>
                isActive ? "font-bold text-green underline" : ""
              }
              to={item.path}
            >
              {item.name}
            </NavLink>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Navbar;
/////////////////////////////////////////////////////////////////////////////

backup card homepage before authcontext //////////////////////////////////////////////////////
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { useSpring, animated } from "@react-spring/web";

const Card = ({ title, description, link, backgroundImage, initialRating }) => {
  const [rating, setRating] = useState(initialRating || 0); // Stato per il rating
  const [votes, setVotes] = useState(0); // Stato per il numero di voti
  const [total, setTotal] = useState(0); // Stato per la somma totale dei voti

  const handleVote = (value) => {
    setTotal((prev) => prev + value); // Aggiungi il voto
    setVotes((prev) => prev + 1); // Incrementa il numero di voti
    setRating(total / (votes + 1)); // Calcola la media
  };

  const [imageProps, imageApi] = useSpring(() => ({
    transform: "scale(1)",
    config: { tension: 200, friction: 20 },
  }));

  return (
    <div className="w-[300px] h-[400px] md:w-[350px] md:h-[450px] lg:w-[400px] lg:h-[500px] rounded-lg overflow-hidden shadow-lg bg-white border border-black">
      <div className="flex flex-col justify-between h-full">
        <div className="relative overflow-hidden">
          <Link to={link}>
            <animated.img
              src={backgroundImage}
              alt="Background"
              className="w-full h-40 md:h-48 lg:h-60 object-cover transition-transform duration-300 cursor-pointer"
              style={imageProps}
              onMouseEnter={() => imageApi.start({ transform: "scale(1.1)" })}
              onMouseLeave={() => imageApi.start({ transform: "scale(1)" })}
            />
          </Link>

          <div
            className="absolute top-0 right-0 mt-2 mr-2 bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded border border-black"
            style={{
              textShadow:
                "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
            }}
          >
            FREE
          </div>
        </div>
        <div className="p-6">
          <h1 className="text-gray-900 text-xl font-bold mb-2">{title}</h1>
          <p className="text-gray-700 text-base mb-4">{description}</p>

          <div className="flex items-center space-x-2 mb-4">
            <span
              className="text-blue-300 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              HTML
            </span>
            <span
              className="text-blue-800 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              CSS
            </span>
            <span
              className="text-pink-400 text-2xl font-semibold px-2.5 py-0.5 rounded border border-black"
              style={{
                textShadow:
                  "-1px -1px 0 black, 1px -1px 0 black, -1px 1px 0 black, 1px 1px 0 black",
              }}
            >
              JS
            </span>
          </div>

          {/* Sezione per il Rating */}
          <div className="flex items-center space-x-2">
            {[1, 2, 3, 4, 5].map((star) => (
              <button
                key={star}
                className="text-yellow-500"
                onClick={() => handleVote(star)} // Gestisce il voto
              >
                ★
              </button>
            ))}
          </div>
          <p className="text-gray-600 mt-2">
            {votes > 0
              ? `Rating: ${rating.toFixed(1)} (${votes} votes)`
              : "No votes yet"}
          </p>
        </div>
      </div>
    </div>
  );
};

export default Card;
/////////////////////////////////////////////////////////////////////////////////

backup navbar before auth context//////////////////////////////////////////////////////
import { NavLink  } from "react-router-dom";
import { useAuth } from "./AuthContext"; // Importa il contesto


const menulist = [
  {
    name: "Home",
    path: "/homepage",
  },
  {
    name: "Log-in",
    path: "/login",
  },
];

const Navbar = () => {
  const { user, logout } = useAuth(); // Estrai user e logout dal contesto
  
 

  return (
    <nav className="bg-gray-800 text-white p-4 flex flex-col sm:flex-row justify-between items-center text-lg sm:text-2xl">
      <ul className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 m-0 w-full sm:w-auto">
        {menulist.map((item, index) => (
          <li key={index} className="text-center sm:text-left">
            <NavLink
              className={({ isActive }) =>
                isActive ? "font-bold text-green underline" : ""
              }
              to={item.path}
            >
              {item.name}
            </NavLink>
          </li>
        ))}
        {user && (
          <li className="text-center sm:text-left">
            <span className="mr-4">Ciao, {user}</span>
            <button
              onClick={logout} // Aggiungi il logout
              className="bg-red-500 text-white py-1 px-2 rounded hover:bg-red-600"
            >
              Logout
            </button>
          </li>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;
/////////////////////////////////////////////////////////////////////////////////



