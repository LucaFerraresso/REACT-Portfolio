 ////////////////////////////////////////////////////////////////////////////////////////////////
logica crud + animazioni + delay (put: pulsa durante l'editing), quella attiva lampegga solo alla fine

const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState({
    title: "",
    description: "",
    category: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isAdding, setIsAdding] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [editItemId, setEditItemId] = useState(null); // Stato per l'elemento da modificare
  const [animatingItems, setAnimatingItems] = useState({});

  // Fetch items on component mount
  useEffect(() => {
    fetchItems();
  }, []);

  const fetchItems = async () => {
    setIsLoading(true);
    setTimeout(async () => {
      const response = await fetch("/api/items");
      const data = await response.json();
      setItems(data);
      setIsLoading(false);
    }, 1500); // Delay to simulate loading
  };

  // Add new item to the database
  const addItem = async () => {
    setIsAdding(true);
    if (!newItem.title.trim() || !newItem.category.trim()) return;

    const response = await fetch("/api/items", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newItem),
    });

    const addedItem = await response.json();
    setNewItem({ title: "", description: "", category: "" });
    setAnimatingItems((prev) => ({
      ...prev,
      [addedItem._id]: "fadeIn",
    }));
    setItems((prev) => [...prev, addedItem]);

    setTimeout(() => {
      setIsAdding(false);
      setAnimatingItems((prev) => ({
        ...prev,
        [addedItem._id]: "",
      }));
    }, 1500); // Simulate fade-in duration
  };

  // Update item in the database
  const updateItem = async () => {
    if (!newItem.title.trim() || !newItem.category.trim()) return;
    setIsUpdating(true);

    const response = await fetch(`/api/items?updateId=${editItemId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newItem),
    });

    await response.json();
    setItems((prev) =>
      prev.map((item) =>
        item._id === editItemId ? { ...item, ...newItem } : item
      )
    );

    setNewItem({ title: "", description: "", category: "" });
    setEditItemId(null); // Resetta l'ID dell'elemento in modifica

    setTimeout(() => {
      setIsUpdating(false);

      setAnimatingItems((prev) => ({
        ...prev,
        [editItemId]: "",
      }));
    }, 1500); // Delay for pulse effect before applying fadeIn
  };

  // Delete item from the database
  const deleteItem = async (id) => {
    setAnimatingItems((prev) => ({
      ...prev,
      [id]: "fadeOut",
    }));
    setTimeout(async () => {
      const response = await fetch(`/api/items?id=${id}`, {
        method: "DELETE",
      });
      const deleteResult = await response.json();
      if (deleteResult.deletedCount > 0) {
        setItems((prev) => prev.filter((item) => item._id !== id));
      }
      setAnimatingItems((prev) => ({
        ...prev,
        [id]: "",
      }));
    }, 1500); // Simulate fade-out duration
  };

  // Handle edit button click
  const handleEditClick = (item) => {
    setEditItemId(item._id);
    setNewItem({
      title: item.title,
      description: item.description,
      category: item.category,
    });
    setAnimatingItems((prev) => ({
      ...prev,
      [item._id]: "pulse",
    }));
  };

  ///////////////////////////////////////////////////////////////////////////////////////////////